apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    packagingOptions {
        exclude 'META-INF/main.kotlin_module'
    }

    dexOptions {
        maxProcessCount 8
        javaMaxHeapSize "2g"
        preDexLibraries true
    }

    compileSdkVersion rootProject.ext.compileSdkVersion

    flavorDimensions "target", "abi"

    lintOptions {
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation'
    }

    task luaPlaylistCopy(type: Copy) {
        from '../vlc/share/lua/playlist'
        into 'assets/lua/playlist'
        exclude '**/*.txt'
    }

    task luaMetaCopy(type: Copy) {
        from '../vlc/share/lua/meta'
        into 'assets/lua/meta'
        exclude '**/*.txt'
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "org.videolan.vlc"

        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
        resValue "string", "build_vlc_revision", vlcRevision()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        tasks.whenTaskAdded { task ->
            if (task.name.startsWith('merge')) {
                task.dependsOn luaPlaylistCopy
                task.dependsOn luaMetaCopy
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/assets/schemas".toString()]
            }
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
        }
    }

    signingConfigs {
        release {
            /*
            To set this properties, create file gradle.properties with these 3 props.
            e.g.
            keyStoreFile=/home/<username>/.android/debug.keystore
            storealias=androiddebugkey
            storepwd=android
             */
            storeFile file(keyStoreFile)
            keyAlias storealias
            if (System.getenv('PASSWORD_KEYSTORE') != null && !System.getenv('PASSWORD_KEYSTORE').isEmpty()){
                storePassword = System.getenv('PASSWORD_KEYSTORE')
                keyPassword = System.getenv('PASSWORD_KEYSTORE')
            } else {
                storePassword storepwd
                keyPassword storepwd
            }
        }
    }

    buildTypes {
        release {
            signingConfig null
            minifyEnabled true
            shrinkResources false
            proguardFile 'proguard.cfg'
            kotlinOptions.freeCompilerArgs = [ 'Xno-param-assertions']
        }
        signedRelease {
            initWith release
            signingConfig = signingConfigs.release
            matchingFallbacks = ['release']
        }
        debug {
            applicationIdSuffix ".debug"
            jniDebuggable true
        }
    }
    productFlavors {
        vanilla {
            dimension "target"
            versionCode = 1
        }
        ARMv7 {
            dimension "abi"
            versionCode = 4
        }
        x86 {
            dimension "abi"
            versionCode = 5
        }
        MIPS {
            dimension "abi"
            versionCode = 6
        }
        ARMv8 {
            dimension "abi"
            versionCode = 7
        }
        x86_64 {
            dimension "abi"
            versionCode = 8
        }
        MIPS64 {
            dimension "abi"
            versionCode = 9
        }
    }

    // make per-variant version code
    applicationVariants.all { variant ->

        def generatedCode = variant.productFlavors.get(0).versionCode * 10000000 + defaultConfig.versionCode + variant.productFlavors.get(1).versionCode
        //Custom APK name and versionCode
        variant.outputs.each { output ->
            output.versionCodeOverride = generatedCode
            def outputName = "VLC-Android-"
            if (variant.productFlavors.get(0).name != "vanilla")
                outputName += variant.productFlavors.get(0).name.toUpperCase() + "-"
            outputName += variant.versionName + "-" + variant.productFlavors.get(1).name + ".apk"
            output.outputFileName = outputName
        }
    }

    sourceSets.main {
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src']
        resources.srcDirs = ['src']
        aidl.srcDirs = ['src']
        renderscript.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
    }
    sourceSets.release {
        manifest.srcFile 'flavors/release/AndroidManifest.xml'
    }
    sourceSets.debug {
        res.srcDirs = ['flavors/debug/res']
    }
    sourceSets.test {
        java.srcDirs = ['test', 'test-common']
    }
    sourceSets.androidTest {
        java.srcDirs = ['androidTest', 'test-common']
        assets.srcDirs += files("$projectDir/assets/schemas".toString())
    }
}

kotlin.experimental.coroutines = "enable"

task generateSources (type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

dependencies {
    implementation project(':libvlc')
    implementation project(':medialibrary')
    implementation project(':api')
    // AppCompat
    implementation "androidx.recyclerview:recyclerview:$rootProject.ext.androidxVersion"
    implementation "com.google.android.material:material:$rootProject.ext.androidxVersion"
    implementation "androidx.annotation:annotation:$rootProject.ext.androidxVersion"
    implementation "androidx.preference:preference:$rootProject.ext.androidxVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintLayoutVersion"
    //TV
    implementation "androidx.leanback:leanback:$rootProject.ext.androidxVersion"
    implementation "androidx.leanback:leanback-preference:$rootProject.ext.androidxVersion"
    implementation "androidx.tvprovider:tvprovider:$rootProject.ext.androidxVersion"
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.ext.kotlinx_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.ext.kotlinx_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.ext.archVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$rootProject.ext.archVersion"
    implementation "androidx.room:room-runtime:$rootProject.ext.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.ext.roomVersion"
    implementation "androidx.paging:paging-runtime:$rootProject.ext.pagingVersion"
    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$rootProject.ext.retrofit"
    implementation project(":tools")
    // Test
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.ext.roomVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.ext.archVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.ext.archVersion"
    androidTestImplementation "androidx.test:runner:$rootProject.ext.supportTest"
    androidTestUtil "androidx.test:orchestrator:$rootProject.ext.supportTest"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockito"
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.ext.powerMock"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMock"
}

static def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

static def hostName() {
    return "${System.getProperty("user.name")}@${InetAddress.localHost.hostName}"
}

def revision() {
    def code = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code
    }
    return code.toString()
}

def vlcRevision() {
    def vlc = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        workingDir '../vlc'
        standardOutput = vlc
    }
    return vlc.toString()
}
